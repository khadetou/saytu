// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  ADMIN
  USER
  CUSTOMER
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  image         String?
  password      String?
  role          UserRole @default(USER)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Better-Auth relations
  sessions  Session[]
  accounts  Account[]

  // Business relations
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  orders    Order[]
  contacts  Contact[]
  todoTasks TodoTask[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  website     String?
  address     String?
  city        String?
  country     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users     User[]
  contacts  Contact[]
  products  Product[]
  orders    Order[]
  todoTasks TodoTask[]

  @@map("companies")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  position  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?

  @@map("contacts")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  sku         String?  @unique
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  Int
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  status      OrderStatus @default(DRAFT)
  total       Decimal     @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  customer   User    @relation(fields: [customerId], references: [id])
  customerId String
  company    Company @relation(fields: [companyId], references: [id])
  companyId  Int
  items      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("order_items")
}

model InstalledModule {
  id          Int      @id @default(autoincrement())
  moduleId    String   @unique
  name        String
  version     String
  installDate DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("installed_modules")
}

model TodoTask {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    String   @default("medium") // low, medium, high
  dueDate     DateTime?
  category    String   @default("General")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignedTo User?   @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  company    Company @relation(fields: [companyId], references: [id])
  companyId  Int

  @@map("todo_tasks")
}